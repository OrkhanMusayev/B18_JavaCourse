03/10/2020
Topics: Comments
		Print vs println
		Escape Sequences
		Java CommandLine
		Variables

Warmup tasks:
    Task01:
        create a new class called HelloCybertek
        print Hello Cybertek on the console

    Task02: 
        create a class called TellMeAboutYourSelf
            print:
                your name
                where do you live
                what do you do
                what's your dream job

    Task03: 
        create a class called EmployeeInfo_Variables:
            print:
                your company's name
                your name
                your EmployeeId
                your JobTitle
                your Salary


package name: day02_Variables


Comment: giving notes. will not effect the actual code

	single-line comment:	starts with //
				// comment1


	multi-line comment:  starts with /* and ends with */
				/*
				comment1
				comment2
				comment3
				*/


print statement: printing to the console

		System.out.println(): printing takes place from new line. breaks the line


		System.out.print(): does not break the line, printing takes place from where its left off



escape sequences: must be given within ""
	 \t: paragraph space
	 \n: new line
	 \": prints double quote " on the console
	 \\: prints \ on the console
	 \': prints single quote
	 ' : prints single quote



Java Command Line:
		javac (compiler): javac fileName.java
		java (JVM) : java className


Variables: makes the data reusable
		declare variables:
			DataType  variableName = Data;

		variable name rules:
				1. Must be started with letters
				2. MUST be Unique
				3. cannot be Java Reserved words
				4. cannot contain special character other $ and _


primitive data types: byte, short, int, long, float, double, char, boolean

	for numbers: byte, short, int, long, float, double


		whole number: byte, short, int, long

		decimal number: float, double

		range: 
				double > float > long > int > short > byte

				larger one cannot be assigned to smaller one
				smaller one can be assigned to larger one



		int: preferred primitive by the compiler for whole numbers
			every time if a number is entered, compiler takes it as an int


		double: preferred by the compiler of the decimal numbers

		float:
			float f1 = 0.5f;


String: char sequences, string of texts
		
		String name = "Cybertek School";


+ with string: concat




byte, short , long, int, double, float


on Thursday:
		reveiws
		boolean & char


















